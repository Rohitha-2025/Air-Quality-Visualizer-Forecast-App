# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XICwKGkz7VRsw9Fbo1zE4iGW5m-SWxPg
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load the uploaded file
df = pd.read_csv("sample_aqi_data (1).csv")

# Display the first few rows
df.head()





import pandas as pd

# Load the uploaded CSV file
df = pd.read_csv("sample_aqi_data (1).csv")

# Change all city names to "Hyderabad"
df["City"] = "Hyderabad"

# Save it as a new file
df.to_csv("sample_aqi_data_hyderabad.csv", index=False)

# Show the updated data
df.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 5))
plt.plot(df['Date'], df['AQI'], marker='o', color='green')
plt.title('Daily AQI Levels in Hyderabad')
plt.xlabel('Date')
plt.ylabel('AQI')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(len(df['Date']))

plt.figure(figsize=(10, 5))
plt.bar(x - 0.2, df['PM2.5'], width=0.4, label='PM2.5', color='blue')
plt.bar(x + 0.2, df['PM10'], width=0.4, label='PM10', color='orange')

# 🇮🇳 Safe limit lines (India NAAQS)
plt.axhline(y=60, color='blue', linestyle='--', label='PM2.5 Safe Limit (60 µg/m³)')
plt.axhline(y=100, color='orange', linestyle='--', label='PM10 Safe Limit (100 µg/m³)')

plt.xticks(x, df['Date'], rotation=45)
plt.xlabel('Date')
plt.ylabel('µg/m³')
plt.title('PM2.5 vs PM10 Levels in Hyderabad (Compared to Indian Safe Limits)')
plt.legend()
plt.tight_layout()
plt.grid(True)
plt.show()

# Features (X) and Target (y)
X = df[['PM2.5', 'PM10', 'NO2', 'SO2']]
y = df['AQI']
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, y_pred)

print("Mean Absolute Error:", round(mae, 2))
sample = [[110, 180, 24, 7.5]]  # PM2.5, PM10, NO2, SO2
predicted_aqi = model.predict(sample)
print("Predicted AQI:", round(predicted_aqi[0], 2))

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# from sklearn.linear_model import LinearRegression
# import matplotlib.pyplot as plt
# 
# st.title("Air Quality Monitoring & AQI Predictor")
# st.markdown("📊 This app visualizes AQI levels and predicts Air Quality Index based on pollutant data.")
# 
# file = st.file_uploader("📁 Upload your AQI CSV file", type=["csv"])
# 
# if file:
#     df = pd.read_csv(file)
#     st.subheader("🔍 Preview of Uploaded Data")
#     st.write(df.head())
# 
#     X = df[['PM2.5', 'PM10', 'NO2', 'SO2']]
#     y = df['AQI']
#     model = LinearRegression()
#     model.fit(X, y)
# 
#     if 'Date' in df.columns:
#         st.subheader("📈 AQI Over Time")
#         fig, ax = plt.subplots()
#         ax.plot(df['Date'], df['AQI'], marker='o', color='green')
#         plt.xticks(rotation=45)
#         st.pyplot(fig)
# 
#     st.subheader("🧮 Predict AQI from Pollutant Levels")
#     pm25 = st.number_input("PM2.5", 0.0, 500.0, 80.0)
#     pm10 = st.number_input("PM10", 0.0, 500.0, 120.0)
#     no2 = st.number_input("NO2", 0.0, 200.0, 25.0)
#     so2 = st.number_input("SO2", 0.0, 200.0, 7.0)
# 
#     if st.button("Predict AQI"):
#         pred = model.predict([[pm25, pm10, no2, so2]])
#         st.success(f"🌬️ Predicted AQI: {round(pred[0], 2)}")
#

from google.colab import files
files.download('app.py')